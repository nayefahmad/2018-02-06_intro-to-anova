" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# plot results as boxplot:
p2.box <- ggplot(toss.results.melt,
aes(x=variable,
y=value)) +
geom_boxplot() +
stat_summary(fun.y=mean) +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# choose layout:
if (layout == 1){
p1.bar
} else if (layout ==2){
setpar <- par(mfrow=c(2,1))
return(list(p1.bar, p2.box))
# print(p1.bar); print(p2.box)
par(setpar)  # reset display
}
}
# test fn: -------------
coin.toss(reps=20, layout=2)
setpar <- par(mfrow=c(2,1))
hist(rnorm(100))
hist(rnorm(100))
par(setpar)  # reset display
hist(rnorm(100))
par(setpar)
hist(rnorm(100))
setpar <- par(mfrow=c(1,1))
hist(rnorm(100))
setpar <- par(mfrow=c(2,1))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
hist(rnorm(100))
par(setpar)
hist(rnorm(100))
#***************************************
# FUNCTION TO SIMULATE COIN TOSSES
#***************************************
# define fn: -----------
coin.toss <- function(reps = 100,
numcoins=7,
layout=1) {
# fn to record num heads (=1) for each of several coins that
#     are flipped a specified number of times
# arg layout = 1 for showing col graph, 2 for col and boxplot
# load packages if not already loaded:
if (!require("magrittr")) {
library("magrittr")
}
if (!require("dplyr")) {
library("dplyr")
}
if (!require("reshape2")) {
library("reshape2")
}
if (!require("ggplot2")) {
library("ggplot2")
}
#**************************************
# for each coin, toss and record full results:
toss.results <- sapply(seq(1:numcoins), # data to iterate over
# define fn:
function(x) {
rbinom(n=reps, size=1, prob=.5)
}
) %>% as.data.frame
# print(toss.results)
# find total heads:
summary.results <- summarise_all(toss.results,
sum)  %>% print
# melt data:
toss.results.melt <- melt(toss.results)  %>% print
summary.results.melt <- melt(summary.results)  %>% print
# plot results as col graph:
p1.bar <- ggplot(summary.results.melt,
aes(x=variable,
y=value)) +
geom_bar(stat = "identity",
fill="dodgerblue") +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# plot results as boxplot:
p2.box <- ggplot(toss.results.melt,
aes(x=variable,
y=value)) +
geom_boxplot() +
stat_summary(fun.y=mean) +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# choose layout:
if (layout == 1){
p1.bar
} else if (layout ==2){
setpar <- par(mfrow=c(2,1))
return(list(p1.bar, p2.box))
print(p1.bar); print(p2.box)
par(setpar)  # reset display
}
}
# test fn: -------------
coin.toss(reps=20, layout=2)
plot
#***************************************
# FUNCTION TO SIMULATE COIN TOSSES
#***************************************
# define fn: -----------
coin.toss <- function(reps = 100,
numcoins=7,
layout=1) {
# fn to record num heads (=1) for each of several coins that
#     are flipped a specified number of times
# arg layout = 1 for showing col graph, 2 for col and boxplot
# load packages if not already loaded:
if (!require("magrittr")) {
library("magrittr")
}
if (!require("dplyr")) {
library("dplyr")
}
if (!require("reshape2")) {
library("reshape2")
}
if (!require("ggplot2")) {
library("ggplot2")
}
#**************************************
# for each coin, toss and record full results:
toss.results <- sapply(seq(1:numcoins), # data to iterate over
# define fn:
function(x) {
rbinom(n=reps, size=1, prob=.5)
}
) %>% as.data.frame
# print(toss.results)
# find total heads:
summary.results <- summarise_all(toss.results,
sum)  %>% print
# melt data:
toss.results.melt <- melt(toss.results)  %>% print
summary.results.melt <- melt(summary.results)  %>% print
# plot results as col graph:
p1.bar <- ggplot(summary.results.melt,
aes(x=variable,
y=value)) +
geom_bar(stat = "identity",
fill="dodgerblue") +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# plot results as boxplot:
p2.box <- ggplot(toss.results.melt,
aes(x=variable,
y=value)) +
geom_boxplot() +
stat_summary(fun.y=mean) +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# choose layout:
if (layout == 1){
p1.bar
} else if (layout ==2){
setpar <- par(mfrow=c(2,1))
list(p1.bar, p2.box)
# print(p1.bar); print(p2.box)
par(setpar)  # reset display
}
}
# test fn: -------------
coin.toss(reps=20, layout=2)
#***************************************
# FUNCTION TO SIMULATE COIN TOSSES
#***************************************
# define fn: -----------
coin.toss <- function(reps = 100,
numcoins=7,
layout=1) {
# fn to record num heads (=1) for each of several coins that
#     are flipped a specified number of times
# arg layout = 1 for showing col graph, 2 for col and boxplot
# load packages if not already loaded:
if (!require("magrittr")) {
library("magrittr")
}
if (!require("dplyr")) {
library("dplyr")
}
if (!require("reshape2")) {
library("reshape2")
}
if (!require("ggplot2")) {
library("ggplot2")
}
#**************************************
# for each coin, toss and record full results:
toss.results <- sapply(seq(1:numcoins), # data to iterate over
# define fn:
function(x) {
rbinom(n=reps, size=1, prob=.5)
}
) %>% as.data.frame
# print(toss.results)
# find total heads:
summary.results <- summarise_all(toss.results,
sum)  %>% print
# melt data:
toss.results.melt <- melt(toss.results)  %>% print
summary.results.melt <- melt(summary.results)  %>% print
# plot results as col graph:
p1.bar <- ggplot(summary.results.melt,
aes(x=variable,
y=value)) +
geom_bar(stat = "identity",
fill="dodgerblue") +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# plot results as boxplot:
p2.box <- ggplot(toss.results.melt,
aes(x=variable,
y=value)) +
geom_boxplot() +
stat_summary(fun.y=mean) +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# choose layout:
if (layout == 1){
p1.bar
} else if (layout ==2){
setpar <- par(mfrow=c(2,1))
list(p1.bar, p2.box) %>% print
# print(p1.bar); print(p2.box)
par(setpar)  # reset display
}
}
# test fn: -------------
coin.toss(reps=20, layout=2)
coin.toss(reps=20, layout=2)
coin.toss <- function(reps = 100,
numcoins=7,
layout=1) {
# fn to record num heads (=1) for each of several coins that
#     are flipped a specified number of times
# arg layout = 1 for showing col graph, 2 for col and boxplot
# load packages if not already loaded:
if (!require("magrittr")) {
library("magrittr")
}
if (!require("dplyr")) {
library("dplyr")
}
if (!require("reshape2")) {
library("reshape2")
}
if (!require("ggplot2")) {
library("ggplot2")
}
#**************************************
# for each coin, toss and record full results:
toss.results <- sapply(seq(1:numcoins), # data to iterate over
# define fn:
function(x) {
rbinom(n=reps, size=1, prob=.5)
}
) %>% as.data.frame
# print(toss.results)
# find total heads:
summary.results <- summarise_all(toss.results,
sum)  %>% print
# melt data:
toss.results.melt <- melt(toss.results)  %>% print
summary.results.melt <- melt(summary.results)  %>% print
# plot results as col graph:
p1.bar <- ggplot(summary.results.melt,
aes(x=variable,
y=value)) +
geom_bar(stat = "identity",
fill="dodgerblue") +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# plot results as boxplot:
p2.box <- ggplot(toss.results.melt,
aes(x=variable,
y=value)) +
geom_boxplot() +
stat_summary(fun.y=mean) +
labs(title = paste0("Result of tossing ",
numcoins,
" coins ",
reps,
" times"),
subtitle = as.character(Sys.time())) +
theme_classic(base_size = 16)
# choose layout:
if (layout == 1){
p1.bar
} else if (layout ==2){
setpar <- par(mfrow=c(2,1))
return(list(p1.bar, p2.box))
# print(p1.bar); print(p2.box)
par(setpar)  # reset display
}
}
coin.toss(reps=20, layout=2)
coin.toss(reps=20, layout=2)
#******************************
# IMPORT AND CLEAN ED DATA
#******************************
library("dplyr")
library("lubridate")
library("here")
library("readr")
# rm(list=ls())
# getwd()
# read data from csv file: ---------
visits <- read_csv(here("data", "2017-10-24_vgh-ed-visits.csv"))
# data wrangling: ---------------
visits <- mutate(visits,
StartDate=ymd(StartDate),
StartdateFiscalPeriodLong = as.factor(StartdateFiscalPeriodLong),
StartDateFiscalYear=as.factor(StartDateFiscalYear)) %>%
rename(date=StartDate,
fperiod=StartdateFiscalPeriodLong,
fyear=StartDateFiscalYear,
num.visits = `num visits`) %>%
mutate(day.of.week=weekdays(date),
isweekend= ifelse (day.of.week %in% c("Saturday",
"Sunday"),
1,0),
month=month(date, label=TRUE, abbr=TRUE),
month.fyear=month(date, label=TRUE, abbr=TRUE) %>%
paste(fyear, sep="-") %>%
as.factor) %>%
filter(month %in% c("Oct", "Nov", "Dec", "Jan", "Feb"))
str(visits)
summary(visits)
library("dplyr")
library("lubridate")
library("here")
source(here("src",
"2017-10-26_import-clean-ed-data.R"))
split.fyear <- split(visits, visits$fyear)
split.fyear.month <- split(visits, visits$month)
source(here("src",
"regress-num-ed-visits_function.R"))
year.models <- lapply(split.fyear, regress.fn, summary=FALSE) # %>% print
year.models.summaries <- lapply(split.fyear, regress.fn) %>% print
coin.toss(reps=100,
numcoins = 7,
layout=1)
# ignore this ---------------
library("magrittr")
library("dplyr")
library("here")
source(here("src", "coin.toss_function.R"))
coin.toss(reps=100,
numcoins = 7,
layout=1)
data <- data.frame(predictor1=rep(1, 100),  # this is the y-variable
response=c(rnorm(50, mean=100, sd=10),  # x-variable
rnorm(50, mean=115, sd=10)))
plot(data)
plot(data)
par(mfrow=c(1,1))
plot(data)
hist(data$response)
data %<>% mutate(predictor2 = rep(c(1,2), each=50))
setpar <- par(mfrow=c(1,2))  # display 2 graphs side-by-side
plot(data$response~data$predictor1)
plot(data$response~data$predictor2)
par(setpar)
plot(data$response~data$predictor1)
summary(visits)
visits2 <- filter(fyear=="16/17")
visits2 <- filter(visits, fyear=="16/17")
lm(visits ~ day.of.week, data = visits2)
lm(num.visits ~ day.of.week, data = visits2)
anova1.day.of.week <- lm(num.visits ~ day.of.week, data = visits2)
summary(anova1.day.of.week)
plot(data)
data <- data.frame(predictor1=rep(1, 100),  # this is the y-variable
response=c(rnorm(50, mean=100, sd=10),  # x-variable
rnorm(50, mean=115, sd=10)))
plot(data)
?ablien
?abline
plot(data); abline(a=mean(data$response, col="blue"))
plot(data);
abline(a=mean(data$response, col="blue"))
mean <- mean(data$response, col="blue"))
abline(a=mean)
abline(a=mean)
plot(data);
abline(a=mean)
plot(data);
abline(h=mean(data$response, col="blue"))
plot(data);
abline(h=mean(data$response), col="blue")
data %<>% mutate(predictor2 = rep(c(1,2), each=50))
setpar <- par(mfrow=c(1,2))  # display 2 graphs side-by-side
plot(data$response~data$predictor1)
plot(data$response~data$predictor2)
par(setpar)  # par(mfrow=c(1,1))
summary(visits)
head(visits)
anova1.day.of.week <- lm(num.visits ~ day.of.week, data = visits2)
summary(anova1.day.of.week)
visits3 <- filter(visits, fyear=="12/13")
anova2.day.of.week <- lm(num.visits ~ day.of.week, data = visits3)
summary(anova1.day.of.week)
summary(anova2.day.of.week)
coin.toss(reps=100,
numcoins = 7,
layout=1)
summary(anova1.day.of.week)
coin.toss(reps=100,
numcoins = 7,
layout=1)
coin.toss(reps=100,
numcoins = 7,
layout=1)
coin.toss(reps=100,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
coin.toss(reps=20,
numcoins = 7,
layout=1)
data <- data.frame(predictor1=rep(1, 100),  # this is the y-variable
response=c(rnorm(50, mean=100, sd=10),  # x-variable
rnorm(50, mean=115, sd=10)))
View(data)
plot(data);
abline(h=mean(data$response), col="blue")  # add line for mean
data %<>% mutate(predictor2 = rep(c(1,2), each=50))
View(data)
setpar <- par(mfrow=c(1,2))  # display 2 graphs side-by-side
plot(data$response~data$predictor1)
plot(data$response~data$predictor2)
head(visits)
anova1.day.of.week <- lm(num.visits ~ day.of.week, data = visits2)
summary(anova1.day.of.week)
visits3 <- filter(visits, fyear=="12/13")
anova2.day.of.week <- lm(num.visits ~ day.of.week, data = visits3)
summary(anova2.day.of.week)
summary(anova1.day.of.week)
